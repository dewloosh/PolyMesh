
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_0_grid1.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_0_grid1.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_0_grid1.py:


Plotting in 2d with `matplotlib`
================================

.. GENERATED FROM PYTHON SOURCE LINES 8-9

## Step 1 : Create a grid of quadrilaterals

.. GENERATED FROM PYTHON SOURCE LINES 11-22

.. code-block:: python3

    from polymesh.grid import grid

    gridparams = {
        'size' : (1200, 600),
        'shape' : (30, 15),
        'eshape' : (2, 2),
        'origo' : (0, 0),
        'start' : 0
    }
    coordsQ4, topoQ4 = grid(**gridparams)








.. GENERATED FROM PYTHON SOURCE LINES 23-24

## Step 2 : Transform the mesh to triangles

.. GENERATED FROM PYTHON SOURCE LINES 26-32

.. code-block:: python3

    from polymesh.topo.tr import Q4_to_T3
    from polymesh.tri.trimesh import triangulate

    points, triangles = Q4_to_T3(coordsQ4, topoQ4, path='grid')
    triobj = triangulate(points=points[:, :2], triangles=triangles)[-1]








.. GENERATED FROM PYTHON SOURCE LINES 33-34

## Step 3 : Plot the mesh

.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: python3

    from polymesh.tri.triplot import triplot

    triplot(triobj)




.. image-sg:: /auto_examples/images/sphx_glr_plot_0_grid1_001.png
   :alt: plot 0 grid1
   :srcset: /auto_examples/images/sphx_glr_plot_0_grid1_001.png, /auto_examples/images/sphx_glr_plot_0_grid1_001_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.lines.Line2D object at 0x000001F0459216A0>, <matplotlib.lines.Line2D object at 0x000001F0459219A0>]



.. GENERATED FROM PYTHON SOURCE LINES 41-42

## Step 4 : Plot the mesh with random data

.. GENERATED FROM PYTHON SOURCE LINES 44-45

Create a Hinton-plot with random data.

.. GENERATED FROM PYTHON SOURCE LINES 47-52

.. code-block:: python3

    import numpy as np

    data = np.random.rand(len(triangles))
    triplot(triobj, hinton=True, data=data)




.. image-sg:: /auto_examples/images/sphx_glr_plot_0_grid1_002.png
   :alt: plot 0 grid1
   :srcset: /auto_examples/images/sphx_glr_plot_0_grid1_002.png, /auto_examples/images/sphx_glr_plot_0_grid1_002_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<polymesh.tri.triplot.TriPatchCollection object at 0x000001F045C7D730>]



.. GENERATED FROM PYTHON SOURCE LINES 53-54

Plot the triangles with random cell data.

.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: python3

    data = np.random.rand(len(triangles))
    triplot(triobj, data=data)




.. image-sg:: /auto_examples/images/sphx_glr_plot_0_grid1_003.png
   :alt: plot 0 grid1
   :srcset: /auto_examples/images/sphx_glr_plot_0_grid1_003.png, /auto_examples/images/sphx_glr_plot_0_grid1_003_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.collections.PolyCollection object at 0x000001F045AA8EB0>]



.. GENERATED FROM PYTHON SOURCE LINES 60-61

Now plot the triangles with random point data and a 'bwr' colormap. Fot the different colormaps, see matplotlib's documentation.

.. GENERATED FROM PYTHON SOURCE LINES 63-64

_[Click here to see the built-in colormaps in matplotlib](https://matplotlib.org/stable/tutorials/colors/colormaps.html)_

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: python3

    data = np.random.rand(len(points))
    triplot(triobj, data=data, cmap='bwr')




.. image-sg:: /auto_examples/images/sphx_glr_plot_0_grid1_004.png
   :alt: plot 0 grid1
   :srcset: /auto_examples/images/sphx_glr_plot_0_grid1_004.png, /auto_examples/images/sphx_glr_plot_0_grid1_004_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.collections.PolyCollection object at 0x000001F0459DF1F0>]



.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: python3

    data = np.random.rand(len(points))
    triplot(triobj, data=data, cmap='Set1', axis='off')




.. image-sg:: /auto_examples/images/sphx_glr_plot_0_grid1_005.png
   :alt: plot 0 grid1
   :srcset: /auto_examples/images/sphx_glr_plot_0_grid1_005.png, /auto_examples/images/sphx_glr_plot_0_grid1_005_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.collections.PolyCollection object at 0x000001F05A20FD00>]



.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: python3

    data = np.random.rand(len(points))
    triplot(triobj, data=data, cmap='gnuplot', axis='off', ecolor='k', lw=0.8)





.. image-sg:: /auto_examples/images/sphx_glr_plot_0_grid1_006.png
   :alt: plot 0 grid1
   :srcset: /auto_examples/images/sphx_glr_plot_0_grid1_006.png, /auto_examples/images/sphx_glr_plot_0_grid1_006_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.collections.PolyCollection object at 0x000001F05A2FF6A0>]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.561 seconds)

**Estimated memory usage:**  40 MB


.. _sphx_glr_download_auto_examples_plot_0_grid1.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_0_grid1.py <plot_0_grid1.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_0_grid1.ipynb <plot_0_grid1.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
